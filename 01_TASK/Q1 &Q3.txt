How do you copy by value a composite data type?

    copy- initiate a new variable with the same values.

    Composite data type- assigning a variable just creates a pointer (reference) to that value once.

    Objects,Arrays are composite data type.
	
   Objects:
    	There are multiple ways to make copies of objects, especially with the new expanding and improving JavaScript specification.

   Spread operator
	In ES2015, It ‘spreads’ out all of the values into a new object. 
	
	Eg:
	const obj = { name: 'Foo', age: 22 };
	const newObj = { ...obj }
	console.log(newObj)
	// { name: 'Foo', age: 22 }

     spreading an object is (obj),another object is (newObj),then the key-value pairs are copied together instead of just values. Mostly, spread operator with objects is used to make a copy of an existing object.
	
	A deep copy means that all of the values of the new variable are copied and disconnected from the original variable.
	 A shallow copy means that certain (sub-)values are still connected to the original variable.



why there is a difference in behavior for copying contents in primitive and non primitive type? 

	copying primitive data types in JavaScript.When you make a copy, it will be a real copy.
	Eg:
	const a=5
	let b=a// copy the value of a
	b=9  // reassign a new value to b=9
	console.log(b) //9 value of b changes
	console.log(a) //5  no changes in value of a 

	Non-Primitive Type:
		we are always storing pointers to an address.In this case,if we modify any variable which points to the same address we will change the value stored inside the address itself.
	let a = []
	let b = a
	let c = b
	a.push(1)
	console.log(a) // [1]
	console.log(b) // [1]
	console.log(c) // [1]
	b.push(2)
	console.log(a) // [1, 2]
	console.log(b) // [1, 2]
	console.log(c) // [1, 2]
 	Eg:
	console.log([10] === [10])// both contain the same value, has a different address in memory 